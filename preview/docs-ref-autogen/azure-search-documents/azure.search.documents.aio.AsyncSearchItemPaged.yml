### YamlMime:PythonClass
uid: azure.search.documents.aio.AsyncSearchItemPaged
name: AsyncSearchItemPaged
fullName: azure.search.documents.aio.AsyncSearchItemPaged
module: azure.search.documents.aio
inheritances:
- azure.core.async_paging.AsyncItemPaged
summary: 'Return an async iterator of items.


  args and kwargs will be passed to the AsyncPageIterator constructor directly,

  except page_iterator_class'
constructor:
  syntax: AsyncSearchItemPaged(*args, **kwargs)
methods:
- uid: azure.search.documents.aio.AsyncSearchItemPaged.get_answers
  name: get_answers
  summary: Return answers.
  signature: async get_answers() -> Optional[List[azure.search.documents._generated.models._models_py3.AnswerResult]]
- uid: azure.search.documents.aio.AsyncSearchItemPaged.get_count
  name: get_count
  summary: 'Return the count of results if *include_total_count* was

    set for the query.'
  signature: async get_count() -> int
- uid: azure.search.documents.aio.AsyncSearchItemPaged.get_coverage
  name: get_coverage
  summary: 'Return the coverage percentage, if *minimum_coverage* was

    specificied for the query.'
  signature: async get_coverage() -> float
- uid: azure.search.documents.aio.AsyncSearchItemPaged.get_facets
  name: get_facets
  summary: Return any facet results if faceting was requested.
  signature: async get_facets() -> Optional[Dict]
